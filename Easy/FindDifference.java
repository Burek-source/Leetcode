You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.

class Solution 
{
    public char findTheDifference(String s, String t) 
    {
        char addedLetter = ' ';

        Map<Character, Integer> sMap = new HashMap<>();
        Map<Character, Integer> tMap = new HashMap<>();

        // Count the occurrence of each char in the string s
        for (int i = 0; i < s.length(); i++) 
        {
            sMap.merge(s.charAt(i), 1, Integer::sum);  
        }

         // Count the occurrence of each char in the string t
         for (int i = 0; i < t.length(); i++) 
         {
             tMap.merge(t.charAt(i), 1, Integer::sum);  
         }

         // Find the key that has different values in sMap and tMap
        for(char key : tMap.keySet())
        {
            if(tMap.get(key) != sMap.get(key))
            {
                addedLetter = key;
                break;
            }
        }

        return addedLetter;

    }
}
